// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/appointments": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get paginated list of appointments with optional search (by patient name), status filter, and sorting.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Appointments"
                ],
                "summary": "Get all appointments",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search by patient full name",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by status (pending, done, cancelled)",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "schedule_at",
                        "description": "Sort by field (e.g. schedule_at, created_at)",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "asc",
                        "description": "Sort order (asc or desc)",
                        "name": "order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.PaginatedAppointmentsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new appointment between patient and doctor/staff.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Appointments"
                ],
                "summary": "Create a new appointment",
                "parameters": [
                    {
                        "description": "Appointment input data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateAppointmentRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.CreateAppointmentResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/appointments/appoinmentUser/{userId}": {
            "get": {
                "description": "Mengambil semua janji temu berdasarkan ID user (dokter/staff), beserta informasi user yang membuat janji temu",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Appointments"
                ],
                "summary": "Get appointments by user ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.AppointmentWithUserResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/appointments/appointmentPatient/{patientId}": {
            "get": {
                "description": "Mengambil semua janji temu berdasarkan ID pasien, beserta informasi pasien yang terkait",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Appointments"
                ],
                "summary": "Get appointments by patient ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Patient ID",
                        "name": "patientId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.AppointmentWithPatientResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/appointments/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve detailed information of an appointment by its ID, including patient and doctor/staff info.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Appointments"
                ],
                "summary": "Get appointment by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Appointment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.AppointmentResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update appointment schedule or notes by ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Appointments"
                ],
                "summary": "Update an appointment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Appointment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated appointment data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateAppointmentRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateAppointmentResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete an appointment by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Appointments"
                ],
                "summary": "Delete an appointment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Appointment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.MessageDeleteAppointmentResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/appointments/{id}/statusAppoinment": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Ubah status janji temu berdasarkan ID appointment menjadi pending, done, atau cancelled",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Appointments"
                ],
                "summary": "Ubah status janji temu",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Appointment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Status janji temu baru",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ChangeAppointmentStatusRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.MessageUpdateStatusAppoinmentResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/assessments": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get paginated list of assessments, with optional filter by patient ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Assessments"
                ],
                "summary": "Get all assessments",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by patient ID",
                        "name": "patientId",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.PaginatedAssessmentsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Membuat data assessment baru untuk pasien tertentu",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Assessments"
                ],
                "summary": "Buat assessment baru",
                "parameters": [
                    {
                        "description": "Data assessment baru",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateAssessmentRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.CreateAssessmentSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/assessments/patient/{patientId}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Mengambil semua data assessment yang dimiliki oleh pasien tertentu, termasuk hasil prediksi jika tersedia",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Assessments"
                ],
                "summary": "Mendapatkan semua assessment berdasarkan ID pasien",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Patient ID",
                        "name": "patientId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.AssessmentResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/assessments/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Mengambil detail satu assessment berdasarkan ID, termasuk data pasien (mini) dan hasil prediksi jika ada",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Assessments"
                ],
                "summary": "Mendapatkan assessment berdasarkan ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Assessment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.GetAssessmentByIDSuccessResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Memperbarui tanggal dan jawaban assessment, serta memperbarui waktu terakhir diperbarui (updatedAt)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Assessments"
                ],
                "summary": "Memperbarui assessment berdasarkan ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID Assessment",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Data assessment yang diperbarui",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateAssessmentRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateAssessmentSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Menghapus assessment dari database berdasarkan ID yang diberikan",
                "tags": [
                    "Assessments"
                ],
                "summary": "Menghapus assessment berdasarkan ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Assessment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.MessageDeleteAssesmentResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/medical-records": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve a paginated list of medical records. Supports filtering by patientId and userId.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "MedicalRecords"
                ],
                "summary": "Get all medical records (with pagination and optional filters)",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by patient ID",
                        "name": "patientId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by user ID",
                        "name": "userId",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.PaginatedMedicalRecordsResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Adds a new medical record linked to a patient and user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "MedicalRecords"
                ],
                "summary": "Create a new medical record",
                "parameters": [
                    {
                        "description": "Medical Record input data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateMedicalRecordRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.CreateMedicalRecordResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/medical-records/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve detailed information of a medical record by its ID, including patient and user (doctor/staff) info.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "MedicalRecords"
                ],
                "summary": "Get medical record by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Medical Record ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.MedicalRecordResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update a medical record's patient, user, diagnosis, or treatment.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "MedicalRecords"
                ],
                "summary": "Update medical record by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Medical Record ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Medical Record Data",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateMedicalRecordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateMedicalRecordResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Soft delete a medical record by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "MedicalRecords"
                ],
                "summary": "Delete a medical record",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Medical Record ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.MessageDeleteMedicalRecordResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/patients": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get paginated list of patients with optional search, gender filter, and sorting",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Patients"
                ],
                "summary": "Get all patients",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search by full name or NIK",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by gender (male, female, other)",
                        "name": "gender",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "created_at",
                        "description": "Sort by field (e.g. full_name, created_at)",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "desc",
                        "description": "Sort order (asc or desc)",
                        "name": "order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.PaginatedPatientsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Register a new patient with full name, NIK, birth date, gender, phone, address, and emergency contact",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Patients"
                ],
                "summary": "Create a new patient",
                "parameters": [
                    {
                        "description": "Patient input data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreatePatientRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.CreatePatientResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/patients/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve detailed information of a patient by their ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Patients"
                ],
                "summary": "Get patient by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Patient ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.PatientResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update a patient’s information by ID. Only fields in the request body will be updated.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Patients"
                ],
                "summary": "Update patient data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Patient ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Patient fields to update",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdatePatientInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.PatientResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a patient record by their ID. Only accessible by authorized roles.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Patients"
                ],
                "summary": "Delete a patient",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Patient ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.MessageDeletePatientResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/predictions": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get paginated list of predictions, with optional filters and sorting",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Predictions"
                ],
                "summary": "Get all predictions",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by result label",
                        "name": "resultLabel",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "created_at",
                        "description": "Sort by field (e.g. created_at, probability_score)",
                        "name": "sortBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "desc",
                        "description": "Sort order: asc or desc",
                        "name": "sortOrder",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.PaginatedPredictionsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/predictions/assessment/{assessment_id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Ambil hasil prediksi berdasarkan assessment ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Predictions"
                ],
                "summary": "Get prediction by assessment ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Assessment ID",
                        "name": "assessment_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.PredictionResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/predictions/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Ambil hasil prediksi berdasarkan prediction ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Predictions"
                ],
                "summary": "Get prediction by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Prediction ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.PredictionResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Memperbarui data prediksi (result label dan skor probabilitas) berdasarkan ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Predictions"
                ],
                "summary": "Update prediksi berdasarkan ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Prediction ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Data prediksi yang diperbarui",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdatePredictionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.PredictionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Mengirim data assessment ke model ML, lalu menyimpan hasil prediksi ke database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Predictions"
                ],
                "summary": "Membuat prediksi kesehatan mental dari assessment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Assessment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.PredictionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Menghapus data prediksi dari database berdasarkan ID yang diberikan",
                "tags": [
                    "Predictions"
                ],
                "summary": "Menghapus prediksi berdasarkan ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Prediction ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.MessageDeletePredictionResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/users/": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get paginated list of users with optional search, role filter, and sorting. Only accessible by admin.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get all users",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search by name or email",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by role (admin, doctor, staff)",
                        "name": "role",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "created_at",
                        "description": "Sort by field (e.g. full_name, email, created_at)",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "desc",
                        "description": "Sort order (asc or desc)",
                        "name": "order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.PaginatedUsersResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/users/login": {
            "post": {
                "description": "Authenticate user and return JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Login user",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.LoginUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/users/register": {
            "post": {
                "description": "Create a new user with full name, email, password, and role",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Register new user",
                "parameters": [
                    {
                        "description": "Register input",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RegisterUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.RegisterUserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/users/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve a single user by their ID. Only accessible by admin.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get user by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.UserResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update user information by ID. Can update fullName, email, password, and role. Requires authentication.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update user by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated user data",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateUserInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to Update User",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a user by their ID. Only accessible by admin.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Delete user by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.MessageDeleteResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.AppointmentResponse": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "notes": {
                    "type": "string"
                },
                "patient": {
                    "$ref": "#/definitions/dto.PatientMiniResponse"
                },
                "patientId": {
                    "type": "string"
                },
                "scheduleAt": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/dto.UserMiniResponse"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "dto.AppointmentWithPatientResponse": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "date": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "patient": {
                    "$ref": "#/definitions/dto.PatientMiniResponse"
                },
                "patientId": {
                    "type": "string"
                },
                "time": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "dto.AppointmentWithUserResponse": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "notes": {
                    "type": "string"
                },
                "patientId": {
                    "type": "string"
                },
                "scheduleAt": {
                    "type": "string"
                },
                "status": {
                    "description": "🔧 tambahkan ini",
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "user": {
                    "description": "🔧 ubah dari struct anonymous jadi struct yang sudah ada",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.UserMiniResponse"
                        }
                    ]
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "dto.AssessmentResponse": {
            "type": "object",
            "properties": {
                "answers": {
                    "type": "object",
                    "additionalProperties": true
                },
                "createdAt": {
                    "type": "string"
                },
                "date": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "patient": {
                    "description": "dari relasi",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.PatientMiniResponse"
                        }
                    ]
                },
                "patientId": {
                    "type": "string"
                },
                "prediction": {
                    "description": "nullable",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.PredictionResponse"
                        }
                    ]
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "dto.AssessmentUpdateResponse": {
            "type": "object",
            "properties": {
                "answers": {
                    "type": "object",
                    "additionalProperties": true
                },
                "date": {
                    "type": "string",
                    "example": "2025-07-17T15:00:00Z"
                },
                "id": {
                    "type": "string",
                    "example": "d72f8239-09e7-4b23-a897-3ef6211f6b0a"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2025-07-17T15:05:30Z"
                }
            }
        },
        "dto.ChangeAppointmentStatusRequest": {
            "type": "object",
            "required": [
                "status"
            ],
            "properties": {
                "status": {
                    "type": "string",
                    "enum": [
                        "pending",
                        "done",
                        "cancelled"
                    ]
                }
            }
        },
        "dto.CreateAppointmentRequest": {
            "type": "object",
            "required": [
                "patientId",
                "scheduleAt",
                "userId"
            ],
            "properties": {
                "notes": {
                    "type": "string"
                },
                "patientId": {
                    "type": "string"
                },
                "scheduleAt": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "dto.CreateAppointmentResponse": {
            "type": "object",
            "properties": {
                "appointment": {
                    "$ref": "#/definitions/dto.AppointmentResponse"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "dto.CreateAssessmentRequest": {
            "type": "object",
            "required": [
                "date",
                "patientId"
            ],
            "properties": {
                "answers": {
                    "description": "Raw JSON",
                    "type": "object",
                    "additionalProperties": true
                },
                "date": {
                    "description": "sesuai format date ISO",
                    "type": "string"
                },
                "patientId": {
                    "type": "string"
                }
            }
        },
        "dto.CreateAssessmentSuccessResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.AssessmentResponse"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "dto.CreateMedicalRecordRequest": {
            "type": "object",
            "required": [
                "diagnosis",
                "patientId",
                "treatment",
                "userId"
            ],
            "properties": {
                "diagnosis": {
                    "type": "string"
                },
                "patientId": {
                    "type": "string"
                },
                "treatment": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "dto.CreateMedicalRecordResponse": {
            "type": "object",
            "properties": {
                "medicalRecord": {
                    "$ref": "#/definitions/dto.MedicalRecordResponse"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "dto.CreatePatientRequest": {
            "type": "object",
            "required": [
                "address",
                "birthDate",
                "emergencyContact",
                "fullName",
                "gender",
                "nik",
                "phone"
            ],
            "properties": {
                "address": {
                    "type": "string",
                    "example": "Jl. Merdeka No. 10"
                },
                "birthDate": {
                    "type": "string",
                    "example": "2000-01-01"
                },
                "emergencyContact": {
                    "type": "string",
                    "example": "08198765432"
                },
                "fullName": {
                    "type": "string",
                    "example": "Andi Saputra"
                },
                "gender": {
                    "type": "string",
                    "enum": [
                        "male",
                        "female",
                        "other"
                    ],
                    "example": "male"
                },
                "nik": {
                    "type": "string",
                    "example": "3201012345678900"
                },
                "phone": {
                    "type": "string",
                    "example": "08123456789"
                }
            }
        },
        "dto.CreatePatientResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Patient created successfully"
                },
                "patient": {
                    "$ref": "#/definitions/dto.PatientResponse"
                }
            }
        },
        "dto.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Invalid input"
                }
            }
        },
        "dto.GetAssessmentByIDSuccessResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.AssessmentResponse"
                }
            }
        },
        "dto.LoginResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "john@example.com"
                },
                "role": {
                    "type": "string",
                    "example": "admin"
                },
                "token": {
                    "type": "string",
                    "example": "jwt-token"
                }
            }
        },
        "dto.LoginUserRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "password": {
                    "type": "string",
                    "example": "password123"
                }
            }
        },
        "dto.MedicalRecordMiniPatient": {
            "type": "object",
            "properties": {
                "fullName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                }
            }
        },
        "dto.MedicalRecordMiniUser": {
            "type": "object",
            "properties": {
                "fullName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                }
            }
        },
        "dto.MedicalRecordResponse": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "diagnosis": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "patient": {
                    "$ref": "#/definitions/dto.MedicalRecordMiniPatient"
                },
                "patientId": {
                    "type": "string"
                },
                "treatment": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/dto.MedicalRecordMiniUser"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "dto.MessageDeleteAppointmentResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "dto.MessageDeleteAssesmentResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "dto.MessageDeleteMedicalRecordResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "dto.MessageDeletePatientResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Patient deleted successfully"
                }
            }
        },
        "dto.MessageDeletePredictionResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "dto.MessageDeleteResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "User Deleted Successfully"
                }
            }
        },
        "dto.MessageUpdateStatusAppoinmentResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "dto.PaginatedAppointmentsResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.AppointmentResponse"
                    }
                },
                "limit": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                },
                "totalPages": {
                    "type": "integer"
                }
            }
        },
        "dto.PaginatedAssessmentsResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.AssessmentResponse"
                    }
                },
                "limit": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                },
                "totalPages": {
                    "type": "integer"
                }
            }
        },
        "dto.PaginatedMedicalRecordsResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.MedicalRecordResponse"
                    }
                },
                "limit": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                },
                "totalPages": {
                    "type": "integer"
                }
            }
        },
        "dto.PaginatedPatientsResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.PatientResponse"
                    }
                },
                "limit": {
                    "type": "integer",
                    "example": 10
                },
                "page": {
                    "type": "integer",
                    "example": 1
                },
                "total": {
                    "type": "integer",
                    "example": 100
                },
                "totalPages": {
                    "type": "integer",
                    "example": 10
                }
            }
        },
        "dto.PaginatedPredictionsResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.PredictionResponse"
                    }
                },
                "limit": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                },
                "totalPages": {
                    "type": "integer"
                }
            }
        },
        "dto.PaginatedUsersResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.UserResponse"
                    }
                },
                "limit": {
                    "type": "integer",
                    "example": 10
                },
                "page": {
                    "type": "integer",
                    "example": 1
                },
                "total": {
                    "type": "integer",
                    "example": 100
                },
                "totalPages": {
                    "type": "integer",
                    "example": 10
                }
            }
        },
        "dto.PatientMiniResponse": {
            "type": "object",
            "properties": {
                "birthDate": {
                    "type": "string"
                },
                "fullName": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                }
            }
        },
        "dto.PatientResponse": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string",
                    "example": "Jl. Merdeka No. 10"
                },
                "birthDate": {
                    "type": "string",
                    "example": "2000-01-01"
                },
                "emergencyContact": {
                    "type": "string",
                    "example": "08198765432"
                },
                "fullName": {
                    "type": "string",
                    "example": "Andi Saputra"
                },
                "gender": {
                    "type": "string",
                    "example": "male"
                },
                "id": {
                    "type": "string",
                    "example": "patient-001-ABC12345"
                },
                "nik": {
                    "type": "string",
                    "example": "3201012345678900"
                },
                "phone": {
                    "type": "string",
                    "example": "08123456789"
                }
            }
        },
        "dto.PredictionResponse": {
            "type": "object",
            "properties": {
                "assessmentId": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "probabilityScore": {
                    "type": "number"
                },
                "resultLabel": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "dto.RegisterUserRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "john@example.com"
                },
                "fullName": {
                    "type": "string",
                    "example": "John Doe"
                },
                "password": {
                    "type": "string",
                    "example": "password123"
                },
                "role": {
                    "type": "string",
                    "example": "admin"
                }
            }
        },
        "dto.RegisterUserResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "User Registered"
                },
                "user": {
                    "$ref": "#/definitions/dto.UserResponse"
                }
            }
        },
        "dto.UpdateAppointmentRequest": {
            "type": "object",
            "properties": {
                "notes": {
                    "description": "opsional",
                    "type": "string"
                },
                "scheduleAt": {
                    "description": "opsional",
                    "type": "string"
                }
            }
        },
        "dto.UpdateAppointmentResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "updatedFields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.UpdatedField"
                    }
                }
            }
        },
        "dto.UpdateAssessmentRequest": {
            "type": "object",
            "required": [
                "date"
            ],
            "properties": {
                "answers": {
                    "type": "object",
                    "additionalProperties": true
                },
                "date": {
                    "type": "string"
                }
            }
        },
        "dto.UpdateAssessmentSuccessResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.AssessmentUpdateResponse"
                },
                "message": {
                    "type": "string",
                    "example": "Assessment berhasil diperbarui"
                }
            }
        },
        "dto.UpdateMedicalRecordRequest": {
            "type": "object",
            "required": [
                "diagnosis",
                "patientId",
                "treatment",
                "userId"
            ],
            "properties": {
                "diagnosis": {
                    "type": "string"
                },
                "patientId": {
                    "type": "string"
                },
                "treatment": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "dto.UpdateMedicalRecordResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "updatedFields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.UpdatedField"
                    }
                }
            }
        },
        "dto.UpdatePatientInput": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string",
                    "example": "Jl. Merpati No. 123"
                },
                "birthDate": {
                    "type": "string",
                    "example": "1980-12-31"
                },
                "emergencyContact": {
                    "type": "string",
                    "example": "081987654321"
                },
                "fullName": {
                    "type": "string",
                    "example": "Budi Santoso"
                },
                "gender": {
                    "type": "string",
                    "example": "male"
                },
                "nik": {
                    "type": "string",
                    "example": "3201012345678901"
                },
                "phone": {
                    "type": "string",
                    "example": "081234567891"
                }
            }
        },
        "dto.UpdatePredictionRequest": {
            "type": "object",
            "required": [
                "probabilityScore",
                "resultLabel"
            ],
            "properties": {
                "probabilityScore": {
                    "type": "number",
                    "maximum": 1,
                    "minimum": 0
                },
                "resultLabel": {
                    "type": "string"
                }
            }
        },
        "dto.UpdateUserInput": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "fullName": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 6
                },
                "role": {
                    "type": "string",
                    "enum": [
                        "admin",
                        "doctor",
                        "staff"
                    ]
                }
            }
        },
        "dto.UpdatedField": {
            "type": "object",
            "properties": {
                "field": {
                    "type": "string"
                },
                "value": {}
            }
        },
        "dto.UserMiniResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "description": "🔧 optional: jika kamu ingin tampilkan email juga",
                    "type": "string"
                },
                "fullName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                }
            }
        },
        "dto.UserResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "john@example.com"
                },
                "fullName": {
                    "type": "string",
                    "example": "John Doe"
                },
                "id": {
                    "type": "string",
                    "example": "admin-001-a1b2c3d4"
                },
                "role": {
                    "type": "string",
                    "example": "admin"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Klinik API",
	Description:      "API untuk sistem informasi klinik kesehatan mental",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
